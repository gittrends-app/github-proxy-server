{"version":3,"sources":["../src/cli.ts","../package.json","../src/server.ts","../src/router.ts"],"sourcesContent":["#!/usr/bin/env node\n\n/* Author: Hudson S. Borges */\nimport chalk from 'chalk';\nimport { Command, Option } from 'commander';\nimport consola from 'consola';\nimport EventEmitter from 'events';\nimport ip from 'ip';\nimport isNil from 'lodash/isNil.js';\nimport isObjectLike from 'lodash/isObjectLike.js';\nimport omit from 'lodash/omit.js';\nimport omitBy from 'lodash/omitBy.js';\nimport { pathToFileURL } from 'url';\n\nimport packageJson from '../package.json' with { type: \"json\" };\nimport { CliOpts, concatTokens, createProxyServer, readTokensFile } from './server.js';\n\nexport function createCli(): Command {\n  const program = new Command();\n\n  return program\n    .addOption(\n      new Option('-p, --port [port]', 'Port to start the proxy server')\n        .argParser(Number)\n        .default(3000)\n        .env('PORT')\n    )\n    .addOption(\n      new Option('-t, --token [token]', 'GitHub token to be used')\n        .argParser(concatTokens)\n        .default([])\n    )\n    .addOption(\n      new Option('--tokens [file]', 'File containing a list of tokens')\n        .argParser(readTokensFile)\n        .env('GPS_TOKENS_FILE')\n    )\n    .addOption(\n      new Option('--request-timeout [timeout]', 'Request timeout (ms)')\n        .argParser(Number)\n        .default(30000)\n        .env('GPS_REQUEST_TIMEOUT')\n    )\n    .addOption(\n      new Option('--min-remaining <number>', 'Stop using token on a minimum of')\n        .argParser(Number)\n        .default(100)\n        .env('GPS_MIN_REMAINING')\n    )\n    .addOption(\n      new Option('--clustering', '(clustering) enable clustering (requires redis)')\n        .default(false)\n        .env('GPS_CLUSTERING_HOST')\n    )\n    .addOption(\n      new Option('--clustering-host [host]', '(clustering) redis host')\n        .implies({ clustering: true })\n        .default('localhost')\n        .env('GPS_CLUSTERING_HOST')\n    )\n    .addOption(\n      new Option('--clustering-port [port]', '(clustering) redis port')\n        .argParser(Number)\n        .implies({ clustering: true })\n        .default(6379)\n        .env('GPS_CLUSTERING_PORT')\n    )\n    .addOption(\n      new Option('--clustering-db [db]', '(clustering) redis db')\n        .argParser(Number)\n        .implies({ clustering: true })\n        .default(0)\n        .env('GPS_CLUSTERING_DB')\n    )\n    .addOption(new Option('--silent', 'Dont show requests outputs'))\n    .addOption(\n      new Option(\n        '--no-override-authorization',\n        'By default, the authorization header is overrided with a configured token'\n      )\n    )\n    .addOption(new Option('--no-status-monitor', 'Disable requests monitoring on /status'))\n    .version(packageJson.version || '?', '-v, --version', 'output the current version')\n    .action(async (options) => {\n      if (!options.token.length && !(options.tokens && options.tokens.length)) {\n        consola.info(`${program.helpInformation()}`);\n        consola.error(`Arguments missing (\"--token\" or \"--tokens\" is mandatory).\\n\\n`);\n        process.exit(1);\n      }\n\n      EventEmitter.defaultMaxListeners = Number.MAX_SAFE_INTEGER;\n\n      const tokens = [...options.token, ...(options.tokens || [])].reduce(\n        (memo: string[], token: string) => concatTokens(token, memo),\n        []\n      );\n\n      const appOptions: CliOpts = {\n        requestTimeout: options.requestTimeout,\n        silent: options.silent,\n        overrideAuthorization: options.overrideAuthorization,\n        tokens: tokens,\n        clustering: options.clustering\n          ? {\n              host: options.clusteringHost,\n              port: options.clusteringPort,\n              db: options.clusteringDb\n            }\n          : undefined,\n        minRemaining: options.minRemaining,\n        statusMonitor: options.statusMonitor\n      };\n\n      const app = createProxyServer(appOptions);\n\n      app\n        .on('log', (data) => process.stdout.write(data.toString()))\n        .on('warn', consola.warn)\n        .on('error', consola.error);\n\n      const server = app.listen({ host: '0.0.0.0', port: options.port }, (error?: Error) => {\n        if (error) {\n          consola.error(error);\n          process.exit(1);\n        }\n\n        const host = `http://${ip.address()}:${options.port}`;\n        consola.success(\n          `Proxy server running on ${host} (tokens: ${chalk.greenBright(tokens.length)})`\n        );\n\n        function formatObject(object: Record<string, unknown>): string {\n          return Object.entries(omitBy(object, (value) => isNil(value)))\n            .sort((a: [string, unknown], b: [string, unknown]) => (a[0] > b[0] ? 1 : -1))\n            .map(\n              ([k, v]) =>\n                `${k}: ${\n                  isObjectLike(v)\n                    ? `{ ${formatObject(v as Record<string, unknown>)} }`\n                    : chalk.greenBright(v)\n                }`\n            )\n            .join(', ');\n        }\n\n        consola.success(\n          `${chalk.bold('Options')}: %s`,\n          formatObject(omit(appOptions, ['token', 'tokens']))\n        );\n      });\n\n      process.on('SIGTERM', async () => {\n        consola.info('SIGTERM signal received: closing HTTP server');\n\n        server.close((err?: Error) => {\n          if (err) {\n            consola.error(err);\n            process.exit(1);\n          }\n\n          consola.success('Server closed');\n          process.exit(0);\n        });\n      });\n    });\n}\n\n// parse arguments from command line\nif (import.meta.url === pathToFileURL(process.argv[1]).href) {\n  createCli().parse(process.argv);\n}\n","{\n  \"name\": \"@gittrends-app/github-proxy-server\",\n  \"version\": \"10.3.2\",\n  \"exports\": \"./dist/cli.js\",\n  \"engines\": {\n    \"node\": \">=20\"\n  },\n  \"type\": \"module\",\n  \"repository\": \"git@github.com:gittrends-app/github-proxy-server.git\",\n  \"author\": \"Hudson Silva Borges <hudsonsilbor@gmail.com>\",\n  \"license\": \"MIT\",\n  \"scripts\": {\n    \"start\": \"node dist/cli.js\",\n    \"dev\": \"tsx watch src/cli.ts\",\n    \"dev-no-reload\": \"tsx src/cli.ts\",\n    \"jest\": \"NODE_NO_WARNINGS=1 NODE_OPTIONS=\\\"$NODE_OPTIONS --experimental-vm-modules\\\" jest\",\n    \"test\": \"NODE_NO_WARNINGS=1 NODE_OPTIONS=\\\"$NODE_OPTIONS --experimental-vm-modules\\\" jest --no-cache --coverage\",\n    \"commit\": \"git-cz\",\n    \"lint\": \"eslint src\",\n    \"build\": \"shx rm -rf dist && tsup-node src/cli.ts --format esm --sourcemap --splitting\",\n    \"prepare\": \"husky\",\n    \"prettier\": \"prettier --write --config .prettierrc.yml --ignore-path .prettierignore  '**/*.ts'\",\n    \"release\": \"standard-version\",\n    \"np\": \"np --no-publish --yarn --contents dist\"\n  },\n  \"bin\": {\n    \"github-proxy-server\": \"./dist/cli.js\"\n  },\n  \"publishConfig\": {\n    \"access\": \"public\"\n  },\n  \"files\": [\n    \"dist\",\n    \"architecture.png\"\n  ],\n  \"dependencies\": {\n    \"bottleneck\": \"^2.19.5\",\n    \"chalk\": \"4\",\n    \"commander\": \"^12.1.0\",\n    \"consola\": \"^3.2.3\",\n    \"dayjs\": \"^1.11.12\",\n    \"dotenv-override-true\": \"^6.2.2\",\n    \"express\": \"^4.19.2\",\n    \"http-proxy\": \"^1.18.1\",\n    \"http-status-codes\": \"^2.3.0\",\n    \"https-proxy-agent\": \"^7.0.5\",\n    \"ioredis\": \"^5.4.1\",\n    \"ip\": \"^2.0.1\",\n    \"lodash\": \"^4.17.21\",\n    \"node-fetch\": \"^3.3.2\",\n    \"p-limit\": \"^6.1.0\",\n    \"pino\": \"^9.3.2\",\n    \"pino-http\": \"^10.2.0\",\n    \"pino-pretty\": \"^11.2.2\",\n    \"swagger-stats\": \"^0.99.7\",\n    \"table\": \"^6.8.2\"\n  },\n  \"devDependencies\": {\n    \"@commitlint/cli\": \"^19.3.0\",\n    \"@commitlint/config-conventional\": \"^19.2.2\",\n    \"@eslint/eslintrc\": \"^3.1.0\",\n    \"@eslint/js\": \"^9.8.0\",\n    \"@jest/globals\": \"^29.7.0\",\n    \"@trivago/prettier-plugin-sort-imports\": \"^4.3.0\",\n    \"@tsconfig/node20\": \"^20.1.4\",\n    \"@types/async\": \"^3.2.24\",\n    \"@types/http-proxy\": \"^1.17.14\",\n    \"@types/ip\": \"^1.1.3\",\n    \"@types/jest\": \"^29.5.12\",\n    \"@types/lodash\": \"^4.17.7\",\n    \"@types/node\": \"^22.1.0\",\n    \"@types/supertest\": \"^6.0.2\",\n    \"@types/swagger-stats\": \"^0.95.11\",\n    \"@typescript-eslint/eslint-plugin\": \"^8.0.0\",\n    \"@typescript-eslint/parser\": \"^8.0.0\",\n    \"commitizen\": \"^4.3.0\",\n    \"cz-conventional-changelog\": \"3.3.0\",\n    \"eslint\": \"^9.8.0\",\n    \"eslint-config-prettier\": \"^9.1.0\",\n    \"eslint-plugin-import\": \"^2.29.1\",\n    \"eslint-plugin-prettier\": \"^5.2.1\",\n    \"globals\": \"^15.9.0\",\n    \"husky\": \"^9.1.4\",\n    \"jest\": \"^29.7.0\",\n    \"nock\": \"^13.5.5\",\n    \"np\": \"^10.0.7\",\n    \"prettier\": \"^3.3.3\",\n    \"shx\": \"^0.3.4\",\n    \"standard-version\": \"^9.5.0\",\n    \"supertest\": \"^7.0.0\",\n    \"tmp-promise\": \"^3.0.3\",\n    \"ts-jest\": \"^29.2.4\",\n    \"tsup\": \"^8.2.4\",\n    \"tsx\": \"^4.19.0\",\n    \"typescript\": \"^5.5.4\"\n  },\n  \"config\": {\n    \"commitizen\": {\n      \"path\": \"./node_modules/cz-conventional-changelog\"\n    }\n  },\n  \"peerDependencies\": {\n    \"prom-client\": \"14\"\n  }\n}\n","#!/usr/bin/env node\n\n/* Author: Hudson S. Borges */\nimport chalk from 'chalk';\nimport dayjs from 'dayjs';\nimport relativeTime from 'dayjs/plugin/relativeTime.js';\nimport express, { Express, Request, Response } from 'express';\nimport compact from 'lodash/compact.js';\nimport uniq from 'lodash/uniq.js';\nimport { existsSync, readFileSync } from 'node:fs';\nimport { resolve } from 'node:path';\nimport { pino } from 'pino';\nimport { pinoHttp } from 'pino-http';\nimport pinoPretty from 'pino-pretty';\nimport swaggerStats from 'swagger-stats';\nimport { getBorderCharacters, table } from 'table';\n\nimport ProxyRouter, { ProxyRouterOpts, ProxyRouterResponse, WorkerLogger } from './router.js';\n\ndayjs.extend(relativeTime);\n\nfunction statusFormatter(status: number | string): string {\n  switch (true) {\n    case /[23]\\d{2}/.test(`${status}`):\n      return chalk.green(status);\n    case /[4]\\d{2}/.test(`${status}`):\n      return chalk.yellow(status);\n    default:\n      return chalk.red(status);\n  }\n}\n\nfunction logTransform(chunk: WorkerLogger): string {\n  const data = {\n    resource: chunk.resource,\n    token: chunk.token,\n    pending: chunk.pending,\n    remaining: chunk.remaining,\n    reset: dayjs.unix(chunk.reset).fromNow(),\n    duration: `${chunk.duration / 1000}s`,\n    status: statusFormatter(chunk.status || '-')\n  };\n\n  return (\n    table([Object.values(data)], {\n      columnDefault: { alignment: 'right', width: 5 },\n      columns: {\n        0: { width: 11 },\n        1: { width: 5 },\n        2: { width: 3 },\n        3: { width: 5 },\n        4: { width: 18 },\n        5: { width: 7 },\n        6: { width: `${chunk.status || '-'}`.length, alignment: 'left' }\n      },\n      border: getBorderCharacters('void'),\n      singleLine: true\n    }).trimEnd() + '\\n'\n  );\n}\n\n// parse tokens from input\nexport function parseTokens(text: string): string[] {\n  return text\n    .split(/\\n/g)\n    .map((v) => v.replace(/\\s/g, ''))\n    .reduce((acc: string[], v: string) => {\n      if (!v || /^(\\/{2}|#).*/gi.test(v)) return acc;\n      return acc.concat([v.replace(/.*:(.+)/i, '$1')]);\n    }, [])\n    .reduce((acc: string[], token: string) => concatTokens(token, acc), []);\n}\n\n// concat tokens in commander\nexport function concatTokens(token: string, list: string[]): string[] {\n  if (token.length !== 40)\n    throw new Error('Invalid access token detected (they have 40 characters)');\n  return uniq([...list, token]);\n}\n\n// read tokens from a file\nexport function readTokensFile(filename: string): string[] {\n  const filepath = resolve(process.cwd(), filename);\n  if (!existsSync(filepath)) throw new Error(`File \"${filename}\" not found!`);\n  return parseTokens(readFileSync(filepath, 'utf8'));\n}\n\nexport type CliOpts = ProxyRouterOpts & {\n  tokens: string[];\n  silent?: boolean;\n  statusMonitor?: boolean;\n};\n\nexport function createProxyServer(options: CliOpts): Express {\n  const tokens = compact(options.tokens).reduce(\n    (memo: string[], token: string) => concatTokens(token, memo),\n    []\n  );\n\n  const app = express();\n\n  if (process.env.DEBUG === 'true') {\n    app.use(\n      pinoHttp({\n        level: 'info',\n        serializers: {\n          req: (req) => ({ method: req.method, url: req.url }),\n          res: ({ statusCode }) => ({ statusCode })\n        },\n        logger: pino(pinoPretty({ colorize: true }))\n      }) as never\n    );\n  }\n\n  if (options.statusMonitor) {\n    app.use(\n      swaggerStats.getMiddleware({\n        name: 'GitHub Proxy Server',\n        version: process.env.npm_package_version,\n        uriPath: '/status'\n      })\n    );\n  }\n\n  const proxy = new ProxyRouter(tokens, {\n    overrideAuthorization: options.overrideAuthorization ?? true,\n    ...options\n  });\n\n  proxy.on('error', (message) => app.emit('error', message));\n\n  if (!options.silent) {\n    proxy.on('log', (data) => app.emit('log', logTransform(data)));\n    proxy.on('warn', (message) => app.emit('warn', message));\n  }\n\n  function notSupported(req: Request, res: Response) {\n    res.status(ProxyRouterResponse.PROXY_ERROR).send({ message: `Endpoint not supported` });\n  }\n\n  app\n    .post('/graphql', (req: Request, reply: Response) => proxy.schedule(req, reply))\n    .get('/*', (req: Request, reply: Response) => proxy.schedule(req, reply));\n\n  app.delete('/*', notSupported);\n  app.patch('/*', notSupported);\n  app.put('/*', notSupported);\n  app.post('/*', notSupported);\n\n  return app;\n}\n","/* Author: Hudson S. Borges */\nimport Bottleneck from 'bottleneck';\nimport dayjs from 'dayjs';\nimport { Request, Response } from 'express';\nimport Server, { default as proxy } from 'http-proxy';\nimport { StatusCodes } from 'http-status-codes';\nimport minBy from 'lodash/minBy.js';\nimport fetch from 'node-fetch';\nimport EventEmitter from 'node:events';\nimport { ClientRequest, IncomingMessage } from 'node:http';\nimport { Agent } from 'node:https';\nimport { setTimeout } from 'node:timers/promises';\nimport Limiter from 'p-limit';\n\nexport type ProxyRouterOpts = {\n  requestTimeout: number;\n  minRemaining: number;\n  overrideAuthorization?: boolean;\n  clustering?: {\n    host: string;\n    port: number;\n    db: number;\n  };\n};\n\ntype ExtendedRequest = Request & {\n  startedAt?: Date;\n  proxyRequest?: ClientRequest;\n};\n\ntype ExtendedIncomingMessage = IncomingMessage & {\n  startedAt?: Date;\n  hasAuthorization?: boolean;\n  proxyRequest?: ClientRequest;\n};\n\ntype APIResources = 'core' | 'search' | 'code_search' | 'graphql';\n\nexport interface WorkerLogger {\n  resource: APIResources;\n  token: string;\n  pending: number;\n  remaining: number;\n  reset: number;\n  status?: number | string;\n  duration: number;\n}\n\nclass ProxyWorker extends EventEmitter {\n  readonly queue: Bottleneck;\n\n  readonly proxy: Server;\n  readonly token: string;\n  readonly schedule;\n\n  readonly defaults: {\n    resource: APIResources;\n    limit: number;\n    reset: number;\n  };\n\n  remaining: number = 0;\n  reset: number = Date.now() / 1000 + 1;\n\n  constructor(token: string, opts: ProxyRouterOpts & { resource: APIResources }) {\n    super({});\n\n    this.token = token;\n\n    switch (opts.resource) {\n      case 'code_search':\n        this.defaults = { resource: opts.resource, limit: 10, reset: 1000 * 60 };\n        break;\n      case 'search':\n        this.defaults = { resource: opts.resource, limit: 30, reset: 1000 * 60 };\n        break;\n      case 'graphql':\n      default:\n        this.defaults = { resource: opts.resource, limit: 5000, reset: 1000 * 60 * 60 };\n    }\n\n    this.proxy = proxy.createProxyServer({\n      target: 'https://api.github.com',\n      ws: false,\n      xfwd: true,\n      changeOrigin: true,\n      autoRewrite: true,\n      proxyTimeout: opts.requestTimeout,\n      agent: new Agent({\n        keepAlive: true,\n        keepAliveMsecs: 15000,\n        timeout: opts.requestTimeout,\n        scheduling: 'fifo'\n      })\n    });\n\n    this.proxy.on('proxyReq', (proxyReq, req: ExtendedIncomingMessage) => {\n      req.proxyRequest = proxyReq;\n      req.startedAt = new Date();\n      req.hasAuthorization = opts.overrideAuthorization\n        ? false\n        : !!proxyReq.getHeader('authorization');\n\n      if (!req.hasAuthorization) proxyReq.setHeader('authorization', `token ${token}`);\n    });\n\n    this.proxy.on('proxyRes', (proxyRes, req: ExtendedIncomingMessage) => {\n      const replaceURL = (url: string): string =>\n        req.headers.host\n          ? url.replaceAll('https://api.github.com', `http://${req.headers.host}`)\n          : url;\n\n      proxyRes.headers.link =\n        proxyRes.headers.link &&\n        (Array.isArray(proxyRes.headers.link)\n          ? proxyRes.headers.link.map(replaceURL)\n          : replaceURL(proxyRes.headers.link));\n\n      if (req.hasAuthorization) return;\n\n      this.updateLimits({\n        status: `${proxyRes.statusCode}`,\n        ...(proxyRes.headers as Record<string, string>)\n      });\n\n      this.log(proxyRes.statusCode, req.startedAt);\n\n      proxyRes.headers['access-control-expose-headers'] = (\n        proxyRes.headers['access-control-expose-headers'] || ''\n      )\n        .split(', ')\n        .filter((header) => {\n          if (/(ratelimit|scope)/i.test(header)) {\n            delete proxyRes.headers[header.toLowerCase()];\n            return false;\n          }\n          return true;\n        })\n        .join(', ');\n    });\n\n    let maxConcurrent = 1;\n    if (opts.resource === 'graphql') maxConcurrent = 2;\n    else if (opts.resource === 'core') maxConcurrent = 10;\n\n    this.queue = new Bottleneck({\n      maxConcurrent,\n      id: `proxy_server:${opts.resource}:${this.token}`,\n      ...(opts?.clustering\n        ? {\n            datastore: 'ioredis',\n            clearDatastore: false,\n            clientOptions: {\n              host: opts.clustering.host,\n              port: opts.clustering.port,\n              options: { db: opts.clustering.db }\n            },\n            timeout: opts.requestTimeout\n          }\n        : { datastore: 'local' })\n    });\n\n    this.schedule = this.queue.wrap(async (req: ExtendedRequest, res: Response): Promise<void> => {\n      if (req.socket.destroyed) return this.log();\n\n      if (this.remaining <= opts.minRemaining && this.reset > Date.now() / 1000) {\n        this.emit('retry', req, res);\n        return;\n      }\n\n      const task = new Promise((resolve, reject) => {\n        this.remaining -= 1;\n        req.socket.once('close', resolve);\n        req.socket.once('error', reject);\n        res.once('close', resolve);\n        res.once('error', reject);\n        this.proxy.web(req, res as never, undefined, (error) => reject(error));\n      }).catch(async (error) => {\n        this.log(error.code || ProxyRouterResponse.PROXY_ERROR, req.startedAt);\n\n        if (!req.socket.destroyed && !req.socket.writableFinished) {\n          res.status(StatusCodes.BAD_GATEWAY).send();\n        }\n\n        req.proxyRequest?.destroy();\n        res.destroy();\n      });\n\n      await Promise.all([\n        task,\n        setTimeout(['search', 'code_search'].includes(opts.resource) ? 2000 : 1000)\n      ]);\n    });\n  }\n\n  public async refreshRateLimits(): Promise<void> {\n    await fetch('https://api.github.com/rate_limit', {\n      headers: {\n        authorization: `token ${this.token}`,\n        'user-agent': 'GitHub API Proxy Server (@hsborges/github-proxy-server)'\n      }\n    }).then(async (response) => {\n      if (response.status === 401) {\n        this.remaining = 0;\n        this.reset = Infinity;\n        this.emit('error', `Invalid token detected (${this.token}).`, this.token);\n      } else {\n        const res = (await response.json()) as {\n          resources: Record<string, { remaining: number; reset: number }>;\n        };\n        this.remaining = res.resources[this.defaults.resource].remaining;\n        this.reset = res.resources[this.defaults.resource].reset;\n        this.log(undefined, new Date());\n      }\n    });\n  }\n\n  private updateLimits(headers: Record<string, string>): void {\n    if (!headers['x-ratelimit-remaining']) return;\n    if (/401/i.test(headers.status)) {\n      if (parseInt(headers['x-ratelimit-limit'], 10) > 0) this.remaining = 0;\n      else this.remaining -= 1;\n    } else {\n      this.remaining = parseInt(headers['x-ratelimit-remaining'], 10) - this.running;\n      this.reset = parseInt(headers['x-ratelimit-reset'], 10);\n    }\n  }\n\n  private log(status?: number | string, startedAt?: Date): void {\n    this.emit('log', {\n      resource: this.defaults.resource,\n      token: this.token.slice(-4),\n      pending: this.queued,\n      remaining: this.remaining,\n      reset: this.reset,\n      status: status,\n      duration: startedAt ? Date.now() - startedAt.getTime() : 0\n    } satisfies WorkerLogger);\n  }\n\n  get pending(): number {\n    const { RECEIVED, QUEUED, RUNNING, EXECUTING } = this.queue.counts();\n    return RECEIVED + QUEUED + RUNNING + EXECUTING;\n  }\n\n  get running(): number {\n    const { RUNNING, EXECUTING } = this.queue.counts();\n    return RUNNING + EXECUTING;\n  }\n\n  get queued(): number {\n    const { RECEIVED, QUEUED } = this.queue.counts();\n    return RECEIVED + QUEUED;\n  }\n\n  destroy(): this {\n    this.proxy.close();\n    return this;\n  }\n}\n\nexport enum ProxyRouterResponse {\n  PROXY_ERROR = 600\n}\n\nexport default class ProxyRouter extends EventEmitter {\n  private readonly options: ProxyRouterOpts;\n  private readonly limiter = Limiter(1);\n\n  private readonly clients: Array<{\n    token: string;\n    core: ProxyWorker;\n    search: ProxyWorker;\n    code_search: ProxyWorker;\n    graphql: ProxyWorker;\n  }>;\n\n  constructor(tokens: string[], opts?: Partial<ProxyRouterOpts>) {\n    super({});\n\n    if (!tokens.length) throw new Error('At least one token is required!');\n\n    this.clients = [];\n    this.options = Object.assign({ requestTimeout: 20000, minRemaining: 100 }, opts);\n\n    tokens.forEach((token) => this.addToken(token));\n  }\n\n  // function to select the best client and queue request\n  async schedule(req: Request, res: Response): Promise<void> {\n    return this.limiter(async () => {\n      const isGraphQL = req.path.startsWith('/graphql') && req.method === 'POST';\n      const isCodeSearch = req.path.startsWith('/search/code');\n      const isSearch = req.path.startsWith('/search');\n\n      let clients: ProxyWorker[];\n\n      if (isGraphQL) clients = this.clients.map((client) => client.graphql);\n      else if (isCodeSearch) clients = this.clients.map((client) => client.code_search);\n      else if (isSearch) clients = this.clients.map((client) => client.search);\n      else clients = this.clients.map((client) => client.core);\n\n      const available = clients.filter(\n        (client) =>\n          client.remaining > (isSearch ? 1 : this.options.minRemaining) ||\n          client.reset * 1000 < Date.now()\n      );\n\n      if (available.length === 0) {\n        const resetAt = Math.min(...clients.map((c) => c.reset)) * 1000;\n\n        this.emit(\n          'warn',\n          `There is no client available. Retrying at ${dayjs(resetAt).format('HH:mm:ss')}.`\n        );\n\n        return setTimeout(Math.max(0, resetAt - Date.now()) + 1000).then(() => {\n          this.schedule(req, res);\n        });\n      } else {\n        const client = minBy(\n          available,\n          (client) => client.pending + 1 / client.remaining\n        ) as ProxyWorker;\n\n        client.schedule(req, res);\n      }\n    });\n  }\n\n  addToken(token: string): void {\n    if (this.clients.map((client) => client.token).includes(token)) return;\n\n    const core = new ProxyWorker(token, { ...this.options, resource: 'core' });\n    const search = new ProxyWorker(token, { ...this.options, resource: 'search' });\n    const codeSearch = new ProxyWorker(token, { ...this.options, resource: 'code_search' });\n    const graphql = new ProxyWorker(token, { ...this.options, resource: 'graphql' });\n\n    for (const worker of [core, search, codeSearch, graphql]) {\n      worker.on('error', (error: unknown) => this.emit('error', error));\n      worker.on('retry', (req: ExtendedRequest, res: Response) => this.schedule(req, res));\n      worker.on('log', (log: WorkerLogger) => this.emit('log', log));\n      worker.on('warn', (message: string) => this.emit('warn', message));\n      worker.refreshRateLimits().then(() => this.emit('ready'));\n    }\n\n    this.clients.push({ token, core, search, code_search: codeSearch, graphql });\n  }\n\n  removeToken(token: string): void {\n    this.clients.splice(this.clients.map((c) => c.token).indexOf(token), 1).forEach((client) => {\n      for (const worker of [client.core, client.search, client.code_search, client.graphql]) {\n        worker.proxy.close();\n        worker.queue.stop({ dropWaitingJobs: false });\n        worker.queue.disconnect();\n        worker.destroy();\n      }\n    });\n  }\n\n  async refreshRateLimits(): Promise<void> {\n    await Promise.all(\n      this.clients.map((client) =>\n        Promise.all(\n          [client.core, client.search, client.code_search, client.graphql].map((w) =>\n            w.refreshRateLimits()\n          )\n        )\n      )\n    ).then(() => this.emit('ready'));\n  }\n\n  get tokens(): string[] {\n    return this.clients.map((client) => client.token);\n  }\n\n  destroy(): this {\n    this.clients.forEach((client) => this.removeToken(client.token));\n    return this;\n  }\n}\n"],"mappings":";;;AAGA,OAAOA,YAAW;AAClB,SAAS,SAAS,cAAc;AAChC,OAAO,aAAa;AACpB,OAAOC,mBAAkB;AACzB,OAAO,QAAQ;AACf,OAAO,WAAW;AAClB,OAAO,kBAAkB;AACzB,OAAO,UAAU;AACjB,OAAO,YAAY;AACnB,SAAS,qBAAqB;;;ACZ9B;AAAA,EACE,MAAQ;AAAA,EACR,SAAW;AAAA,EACX,SAAW;AAAA,EACX,SAAW;AAAA,IACT,MAAQ;AAAA,EACV;AAAA,EACA,MAAQ;AAAA,EACR,YAAc;AAAA,EACd,QAAU;AAAA,EACV,SAAW;AAAA,EACX,SAAW;AAAA,IACT,OAAS;AAAA,IACT,KAAO;AAAA,IACP,iBAAiB;AAAA,IACjB,MAAQ;AAAA,IACR,MAAQ;AAAA,IACR,QAAU;AAAA,IACV,MAAQ;AAAA,IACR,OAAS;AAAA,IACT,SAAW;AAAA,IACX,UAAY;AAAA,IACZ,SAAW;AAAA,IACX,IAAM;AAAA,EACR;AAAA,EACA,KAAO;AAAA,IACL,uBAAuB;AAAA,EACzB;AAAA,EACA,eAAiB;AAAA,IACf,QAAU;AAAA,EACZ;AAAA,EACA,OAAS;AAAA,IACP;AAAA,IACA;AAAA,EACF;AAAA,EACA,cAAgB;AAAA,IACd,YAAc;AAAA,IACd,OAAS;AAAA,IACT,WAAa;AAAA,IACb,SAAW;AAAA,IACX,OAAS;AAAA,IACT,wBAAwB;AAAA,IACxB,SAAW;AAAA,IACX,cAAc;AAAA,IACd,qBAAqB;AAAA,IACrB,qBAAqB;AAAA,IACrB,SAAW;AAAA,IACX,IAAM;AAAA,IACN,QAAU;AAAA,IACV,cAAc;AAAA,IACd,WAAW;AAAA,IACX,MAAQ;AAAA,IACR,aAAa;AAAA,IACb,eAAe;AAAA,IACf,iBAAiB;AAAA,IACjB,OAAS;AAAA,EACX;AAAA,EACA,iBAAmB;AAAA,IACjB,mBAAmB;AAAA,IACnB,mCAAmC;AAAA,IACnC,oBAAoB;AAAA,IACpB,cAAc;AAAA,IACd,iBAAiB;AAAA,IACjB,yCAAyC;AAAA,IACzC,oBAAoB;AAAA,IACpB,gBAAgB;AAAA,IAChB,qBAAqB;AAAA,IACrB,aAAa;AAAA,IACb,eAAe;AAAA,IACf,iBAAiB;AAAA,IACjB,eAAe;AAAA,IACf,oBAAoB;AAAA,IACpB,wBAAwB;AAAA,IACxB,oCAAoC;AAAA,IACpC,6BAA6B;AAAA,IAC7B,YAAc;AAAA,IACd,6BAA6B;AAAA,IAC7B,QAAU;AAAA,IACV,0BAA0B;AAAA,IAC1B,wBAAwB;AAAA,IACxB,0BAA0B;AAAA,IAC1B,SAAW;AAAA,IACX,OAAS;AAAA,IACT,MAAQ;AAAA,IACR,MAAQ;AAAA,IACR,IAAM;AAAA,IACN,UAAY;AAAA,IACZ,KAAO;AAAA,IACP,oBAAoB;AAAA,IACpB,WAAa;AAAA,IACb,eAAe;AAAA,IACf,WAAW;AAAA,IACX,MAAQ;AAAA,IACR,KAAO;AAAA,IACP,YAAc;AAAA,EAChB;AAAA,EACA,QAAU;AAAA,IACR,YAAc;AAAA,MACZ,MAAQ;AAAA,IACV;AAAA,EACF;AAAA,EACA,kBAAoB;AAAA,IAClB,eAAe;AAAA,EACjB;AACF;;;ACrGA,OAAO,WAAW;AAClB,OAAOC,YAAW;AAClB,OAAO,kBAAkB;AACzB,OAAO,aAA6C;AACpD,OAAO,aAAa;AACpB,OAAO,UAAU;AACjB,SAAS,YAAY,oBAAoB;AACzC,SAAS,eAAe;AACxB,SAAS,YAAY;AACrB,SAAS,gBAAgB;AACzB,OAAO,gBAAgB;AACvB,OAAO,kBAAkB;AACzB,SAAS,qBAAqB,aAAa;;;ACd3C,OAAO,gBAAgB;AACvB,OAAO,WAAW;AAElB,SAAiB,WAAW,aAAa;AACzC,SAAS,mBAAmB;AAC5B,OAAO,WAAW;AAClB,OAAO,WAAW;AAClB,OAAO,kBAAkB;AAEzB,SAAS,aAAa;AACtB,SAAS,kBAAkB;AAC3B,OAAO,aAAa;AAoCpB,IAAM,cAAN,cAA0B,aAAa;AAAA,EAC5B;AAAA,EAEA;AAAA,EACA;AAAA,EACA;AAAA,EAEA;AAAA,EAMT,YAAoB;AAAA,EACpB,QAAgB,KAAK,IAAI,IAAI,MAAO;AAAA,EAEpC,YAAY,OAAe,MAAoD;AAC7E,UAAM,CAAC,CAAC;AAER,SAAK,QAAQ;AAEb,YAAQ,KAAK,UAAU;AAAA,MACrB,KAAK;AACH,aAAK,WAAW,EAAE,UAAU,KAAK,UAAU,OAAO,IAAI,OAAO,MAAO,GAAG;AACvE;AAAA,MACF,KAAK;AACH,aAAK,WAAW,EAAE,UAAU,KAAK,UAAU,OAAO,IAAI,OAAO,MAAO,GAAG;AACvE;AAAA,MACF,KAAK;AAAA,MACL;AACE,aAAK,WAAW,EAAE,UAAU,KAAK,UAAU,OAAO,KAAM,OAAO,MAAO,KAAK,GAAG;AAAA,IAClF;AAEA,SAAK,QAAQ,MAAM,kBAAkB;AAAA,MACnC,QAAQ;AAAA,MACR,IAAI;AAAA,MACJ,MAAM;AAAA,MACN,cAAc;AAAA,MACd,aAAa;AAAA,MACb,cAAc,KAAK;AAAA,MACnB,OAAO,IAAI,MAAM;AAAA,QACf,WAAW;AAAA,QACX,gBAAgB;AAAA,QAChB,SAAS,KAAK;AAAA,QACd,YAAY;AAAA,MACd,CAAC;AAAA,IACH,CAAC;AAED,SAAK,MAAM,GAAG,YAAY,CAAC,UAAU,QAAiC;AACpE,UAAI,eAAe;AACnB,UAAI,YAAY,oBAAI,KAAK;AACzB,UAAI,mBAAmB,KAAK,wBACxB,QACA,CAAC,CAAC,SAAS,UAAU,eAAe;AAExC,UAAI,CAAC,IAAI,iBAAkB,UAAS,UAAU,iBAAiB,SAAS,KAAK,EAAE;AAAA,IACjF,CAAC;AAED,SAAK,MAAM,GAAG,YAAY,CAAC,UAAU,QAAiC;AACpE,YAAM,aAAa,CAAC,QAClB,IAAI,QAAQ,OACR,IAAI,WAAW,0BAA0B,UAAU,IAAI,QAAQ,IAAI,EAAE,IACrE;AAEN,eAAS,QAAQ,OACf,SAAS,QAAQ,SAChB,MAAM,QAAQ,SAAS,QAAQ,IAAI,IAChC,SAAS,QAAQ,KAAK,IAAI,UAAU,IACpC,WAAW,SAAS,QAAQ,IAAI;AAEtC,UAAI,IAAI,iBAAkB;AAE1B,WAAK,aAAa;AAAA,QAChB,QAAQ,GAAG,SAAS,UAAU;AAAA,QAC9B,GAAI,SAAS;AAAA,MACf,CAAC;AAED,WAAK,IAAI,SAAS,YAAY,IAAI,SAAS;AAE3C,eAAS,QAAQ,+BAA+B,KAC9C,SAAS,QAAQ,+BAA+B,KAAK,IAEpD,MAAM,IAAI,EACV,OAAO,CAAC,WAAW;AAClB,YAAI,qBAAqB,KAAK,MAAM,GAAG;AACrC,iBAAO,SAAS,QAAQ,OAAO,YAAY,CAAC;AAC5C,iBAAO;AAAA,QACT;AACA,eAAO;AAAA,MACT,CAAC,EACA,KAAK,IAAI;AAAA,IACd,CAAC;AAED,QAAI,gBAAgB;AACpB,QAAI,KAAK,aAAa,UAAW,iBAAgB;AAAA,aACxC,KAAK,aAAa,OAAQ,iBAAgB;AAEnD,SAAK,QAAQ,IAAI,WAAW;AAAA,MAC1B;AAAA,MACA,IAAI,gBAAgB,KAAK,QAAQ,IAAI,KAAK,KAAK;AAAA,MAC/C,GAAI,MAAM,aACN;AAAA,QACE,WAAW;AAAA,QACX,gBAAgB;AAAA,QAChB,eAAe;AAAA,UACb,MAAM,KAAK,WAAW;AAAA,UACtB,MAAM,KAAK,WAAW;AAAA,UACtB,SAAS,EAAE,IAAI,KAAK,WAAW,GAAG;AAAA,QACpC;AAAA,QACA,SAAS,KAAK;AAAA,MAChB,IACA,EAAE,WAAW,QAAQ;AAAA,IAC3B,CAAC;AAED,SAAK,WAAW,KAAK,MAAM,KAAK,OAAO,KAAsB,QAAiC;AAC5F,UAAI,IAAI,OAAO,UAAW,QAAO,KAAK,IAAI;AAE1C,UAAI,KAAK,aAAa,KAAK,gBAAgB,KAAK,QAAQ,KAAK,IAAI,IAAI,KAAM;AACzE,aAAK,KAAK,SAAS,KAAK,GAAG;AAC3B;AAAA,MACF;AAEA,YAAM,OAAO,IAAI,QAAQ,CAACC,UAAS,WAAW;AAC5C,aAAK,aAAa;AAClB,YAAI,OAAO,KAAK,SAASA,QAAO;AAChC,YAAI,OAAO,KAAK,SAAS,MAAM;AAC/B,YAAI,KAAK,SAASA,QAAO;AACzB,YAAI,KAAK,SAAS,MAAM;AACxB,aAAK,MAAM,IAAI,KAAK,KAAc,QAAW,CAAC,UAAU,OAAO,KAAK,CAAC;AAAA,MACvE,CAAC,EAAE,MAAM,OAAO,UAAU;AACxB,aAAK,IAAI,MAAM,QAAQ,uBAAiC,IAAI,SAAS;AAErE,YAAI,CAAC,IAAI,OAAO,aAAa,CAAC,IAAI,OAAO,kBAAkB;AACzD,cAAI,OAAO,YAAY,WAAW,EAAE,KAAK;AAAA,QAC3C;AAEA,YAAI,cAAc,QAAQ;AAC1B,YAAI,QAAQ;AAAA,MACd,CAAC;AAED,YAAM,QAAQ,IAAI;AAAA,QAChB;AAAA,QACA,WAAW,CAAC,UAAU,aAAa,EAAE,SAAS,KAAK,QAAQ,IAAI,MAAO,GAAI;AAAA,MAC5E,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA,EAEA,MAAa,oBAAmC;AAC9C,UAAM,MAAM,qCAAqC;AAAA,MAC/C,SAAS;AAAA,QACP,eAAe,SAAS,KAAK,KAAK;AAAA,QAClC,cAAc;AAAA,MAChB;AAAA,IACF,CAAC,EAAE,KAAK,OAAO,aAAa;AAC1B,UAAI,SAAS,WAAW,KAAK;AAC3B,aAAK,YAAY;AACjB,aAAK,QAAQ;AACb,aAAK,KAAK,SAAS,2BAA2B,KAAK,KAAK,MAAM,KAAK,KAAK;AAAA,MAC1E,OAAO;AACL,cAAM,MAAO,MAAM,SAAS,KAAK;AAGjC,aAAK,YAAY,IAAI,UAAU,KAAK,SAAS,QAAQ,EAAE;AACvD,aAAK,QAAQ,IAAI,UAAU,KAAK,SAAS,QAAQ,EAAE;AACnD,aAAK,IAAI,QAAW,oBAAI,KAAK,CAAC;AAAA,MAChC;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEQ,aAAa,SAAuC;AAC1D,QAAI,CAAC,QAAQ,uBAAuB,EAAG;AACvC,QAAI,OAAO,KAAK,QAAQ,MAAM,GAAG;AAC/B,UAAI,SAAS,QAAQ,mBAAmB,GAAG,EAAE,IAAI,EAAG,MAAK,YAAY;AAAA,UAChE,MAAK,aAAa;AAAA,IACzB,OAAO;AACL,WAAK,YAAY,SAAS,QAAQ,uBAAuB,GAAG,EAAE,IAAI,KAAK;AACvE,WAAK,QAAQ,SAAS,QAAQ,mBAAmB,GAAG,EAAE;AAAA,IACxD;AAAA,EACF;AAAA,EAEQ,IAAI,QAA0B,WAAwB;AAC5D,SAAK,KAAK,OAAO;AAAA,MACf,UAAU,KAAK,SAAS;AAAA,MACxB,OAAO,KAAK,MAAM,MAAM,EAAE;AAAA,MAC1B,SAAS,KAAK;AAAA,MACd,WAAW,KAAK;AAAA,MAChB,OAAO,KAAK;AAAA,MACZ;AAAA,MACA,UAAU,YAAY,KAAK,IAAI,IAAI,UAAU,QAAQ,IAAI;AAAA,IAC3D,CAAwB;AAAA,EAC1B;AAAA,EAEA,IAAI,UAAkB;AACpB,UAAM,EAAE,UAAU,QAAQ,SAAS,UAAU,IAAI,KAAK,MAAM,OAAO;AACnE,WAAO,WAAW,SAAS,UAAU;AAAA,EACvC;AAAA,EAEA,IAAI,UAAkB;AACpB,UAAM,EAAE,SAAS,UAAU,IAAI,KAAK,MAAM,OAAO;AACjD,WAAO,UAAU;AAAA,EACnB;AAAA,EAEA,IAAI,SAAiB;AACnB,UAAM,EAAE,UAAU,OAAO,IAAI,KAAK,MAAM,OAAO;AAC/C,WAAO,WAAW;AAAA,EACpB;AAAA,EAEA,UAAgB;AACd,SAAK,MAAM,MAAM;AACjB,WAAO;AAAA,EACT;AACF;AAMA,IAAqB,cAArB,cAAyC,aAAa;AAAA,EACnC;AAAA,EACA,UAAU,QAAQ,CAAC;AAAA,EAEnB;AAAA,EAQjB,YAAY,QAAkB,MAAiC;AAC7D,UAAM,CAAC,CAAC;AAER,QAAI,CAAC,OAAO,OAAQ,OAAM,IAAI,MAAM,iCAAiC;AAErE,SAAK,UAAU,CAAC;AAChB,SAAK,UAAU,OAAO,OAAO,EAAE,gBAAgB,KAAO,cAAc,IAAI,GAAG,IAAI;AAE/E,WAAO,QAAQ,CAAC,UAAU,KAAK,SAAS,KAAK,CAAC;AAAA,EAChD;AAAA;AAAA,EAGA,MAAM,SAAS,KAAc,KAA8B;AACzD,WAAO,KAAK,QAAQ,YAAY;AAC9B,YAAM,YAAY,IAAI,KAAK,WAAW,UAAU,KAAK,IAAI,WAAW;AACpE,YAAM,eAAe,IAAI,KAAK,WAAW,cAAc;AACvD,YAAM,WAAW,IAAI,KAAK,WAAW,SAAS;AAE9C,UAAI;AAEJ,UAAI,UAAW,WAAU,KAAK,QAAQ,IAAI,CAAC,WAAW,OAAO,OAAO;AAAA,eAC3D,aAAc,WAAU,KAAK,QAAQ,IAAI,CAAC,WAAW,OAAO,WAAW;AAAA,eACvE,SAAU,WAAU,KAAK,QAAQ,IAAI,CAAC,WAAW,OAAO,MAAM;AAAA,UAClE,WAAU,KAAK,QAAQ,IAAI,CAAC,WAAW,OAAO,IAAI;AAEvD,YAAM,YAAY,QAAQ;AAAA,QACxB,CAAC,WACC,OAAO,aAAa,WAAW,IAAI,KAAK,QAAQ,iBAChD,OAAO,QAAQ,MAAO,KAAK,IAAI;AAAA,MACnC;AAEA,UAAI,UAAU,WAAW,GAAG;AAC1B,cAAM,UAAU,KAAK,IAAI,GAAG,QAAQ,IAAI,CAAC,MAAM,EAAE,KAAK,CAAC,IAAI;AAE3D,aAAK;AAAA,UACH;AAAA,UACA,6CAA6C,MAAM,OAAO,EAAE,OAAO,UAAU,CAAC;AAAA,QAChF;AAEA,eAAO,WAAW,KAAK,IAAI,GAAG,UAAU,KAAK,IAAI,CAAC,IAAI,GAAI,EAAE,KAAK,MAAM;AACrE,eAAK,SAAS,KAAK,GAAG;AAAA,QACxB,CAAC;AAAA,MACH,OAAO;AACL,cAAM,SAAS;AAAA,UACb;AAAA,UACA,CAACC,YAAWA,QAAO,UAAU,IAAIA,QAAO;AAAA,QAC1C;AAEA,eAAO,SAAS,KAAK,GAAG;AAAA,MAC1B;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,SAAS,OAAqB;AAC5B,QAAI,KAAK,QAAQ,IAAI,CAAC,WAAW,OAAO,KAAK,EAAE,SAAS,KAAK,EAAG;AAEhE,UAAM,OAAO,IAAI,YAAY,OAAO,EAAE,GAAG,KAAK,SAAS,UAAU,OAAO,CAAC;AACzE,UAAM,SAAS,IAAI,YAAY,OAAO,EAAE,GAAG,KAAK,SAAS,UAAU,SAAS,CAAC;AAC7E,UAAM,aAAa,IAAI,YAAY,OAAO,EAAE,GAAG,KAAK,SAAS,UAAU,cAAc,CAAC;AACtF,UAAM,UAAU,IAAI,YAAY,OAAO,EAAE,GAAG,KAAK,SAAS,UAAU,UAAU,CAAC;AAE/E,eAAW,UAAU,CAAC,MAAM,QAAQ,YAAY,OAAO,GAAG;AACxD,aAAO,GAAG,SAAS,CAAC,UAAmB,KAAK,KAAK,SAAS,KAAK,CAAC;AAChE,aAAO,GAAG,SAAS,CAAC,KAAsB,QAAkB,KAAK,SAAS,KAAK,GAAG,CAAC;AACnF,aAAO,GAAG,OAAO,CAAC,QAAsB,KAAK,KAAK,OAAO,GAAG,CAAC;AAC7D,aAAO,GAAG,QAAQ,CAAC,YAAoB,KAAK,KAAK,QAAQ,OAAO,CAAC;AACjE,aAAO,kBAAkB,EAAE,KAAK,MAAM,KAAK,KAAK,OAAO,CAAC;AAAA,IAC1D;AAEA,SAAK,QAAQ,KAAK,EAAE,OAAO,MAAM,QAAQ,aAAa,YAAY,QAAQ,CAAC;AAAA,EAC7E;AAAA,EAEA,YAAY,OAAqB;AAC/B,SAAK,QAAQ,OAAO,KAAK,QAAQ,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,QAAQ,KAAK,GAAG,CAAC,EAAE,QAAQ,CAAC,WAAW;AAC1F,iBAAW,UAAU,CAAC,OAAO,MAAM,OAAO,QAAQ,OAAO,aAAa,OAAO,OAAO,GAAG;AACrF,eAAO,MAAM,MAAM;AACnB,eAAO,MAAM,KAAK,EAAE,iBAAiB,MAAM,CAAC;AAC5C,eAAO,MAAM,WAAW;AACxB,eAAO,QAAQ;AAAA,MACjB;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,MAAM,oBAAmC;AACvC,UAAM,QAAQ;AAAA,MACZ,KAAK,QAAQ;AAAA,QAAI,CAAC,WAChB,QAAQ;AAAA,UACN,CAAC,OAAO,MAAM,OAAO,QAAQ,OAAO,aAAa,OAAO,OAAO,EAAE;AAAA,YAAI,CAAC,MACpE,EAAE,kBAAkB;AAAA,UACtB;AAAA,QACF;AAAA,MACF;AAAA,IACF,EAAE,KAAK,MAAM,KAAK,KAAK,OAAO,CAAC;AAAA,EACjC;AAAA,EAEA,IAAI,SAAmB;AACrB,WAAO,KAAK,QAAQ,IAAI,CAAC,WAAW,OAAO,KAAK;AAAA,EAClD;AAAA,EAEA,UAAgB;AACd,SAAK,QAAQ,QAAQ,CAAC,WAAW,KAAK,YAAY,OAAO,KAAK,CAAC;AAC/D,WAAO;AAAA,EACT;AACF;;;ADzWAC,OAAM,OAAO,YAAY;AAEzB,SAAS,gBAAgB,QAAiC;AACxD,UAAQ,MAAM;AAAA,IACZ,KAAK,YAAY,KAAK,GAAG,MAAM,EAAE;AAC/B,aAAO,MAAM,MAAM,MAAM;AAAA,IAC3B,KAAK,WAAW,KAAK,GAAG,MAAM,EAAE;AAC9B,aAAO,MAAM,OAAO,MAAM;AAAA,IAC5B;AACE,aAAO,MAAM,IAAI,MAAM;AAAA,EAC3B;AACF;AAEA,SAAS,aAAa,OAA6B;AACjD,QAAM,OAAO;AAAA,IACX,UAAU,MAAM;AAAA,IAChB,OAAO,MAAM;AAAA,IACb,SAAS,MAAM;AAAA,IACf,WAAW,MAAM;AAAA,IACjB,OAAOA,OAAM,KAAK,MAAM,KAAK,EAAE,QAAQ;AAAA,IACvC,UAAU,GAAG,MAAM,WAAW,GAAI;AAAA,IAClC,QAAQ,gBAAgB,MAAM,UAAU,GAAG;AAAA,EAC7C;AAEA,SACE,MAAM,CAAC,OAAO,OAAO,IAAI,CAAC,GAAG;AAAA,IAC3B,eAAe,EAAE,WAAW,SAAS,OAAO,EAAE;AAAA,IAC9C,SAAS;AAAA,MACP,GAAG,EAAE,OAAO,GAAG;AAAA,MACf,GAAG,EAAE,OAAO,EAAE;AAAA,MACd,GAAG,EAAE,OAAO,EAAE;AAAA,MACd,GAAG,EAAE,OAAO,EAAE;AAAA,MACd,GAAG,EAAE,OAAO,GAAG;AAAA,MACf,GAAG,EAAE,OAAO,EAAE;AAAA,MACd,GAAG,EAAE,OAAO,GAAG,MAAM,UAAU,GAAG,GAAG,QAAQ,WAAW,OAAO;AAAA,IACjE;AAAA,IACA,QAAQ,oBAAoB,MAAM;AAAA,IAClC,YAAY;AAAA,EACd,CAAC,EAAE,QAAQ,IAAI;AAEnB;AAGO,SAAS,YAAY,MAAwB;AAClD,SAAO,KACJ,MAAM,KAAK,EACX,IAAI,CAAC,MAAM,EAAE,QAAQ,OAAO,EAAE,CAAC,EAC/B,OAAO,CAAC,KAAe,MAAc;AACpC,QAAI,CAAC,KAAK,iBAAiB,KAAK,CAAC,EAAG,QAAO;AAC3C,WAAO,IAAI,OAAO,CAAC,EAAE,QAAQ,YAAY,IAAI,CAAC,CAAC;AAAA,EACjD,GAAG,CAAC,CAAC,EACJ,OAAO,CAAC,KAAe,UAAkB,aAAa,OAAO,GAAG,GAAG,CAAC,CAAC;AAC1E;AAGO,SAAS,aAAa,OAAe,MAA0B;AACpE,MAAI,MAAM,WAAW;AACnB,UAAM,IAAI,MAAM,yDAAyD;AAC3E,SAAO,KAAK,CAAC,GAAG,MAAM,KAAK,CAAC;AAC9B;AAGO,SAAS,eAAe,UAA4B;AACzD,QAAM,WAAW,QAAQ,QAAQ,IAAI,GAAG,QAAQ;AAChD,MAAI,CAAC,WAAW,QAAQ,EAAG,OAAM,IAAI,MAAM,SAAS,QAAQ,cAAc;AAC1E,SAAO,YAAY,aAAa,UAAU,MAAM,CAAC;AACnD;AAQO,SAAS,kBAAkB,SAA2B;AAC3D,QAAM,SAAS,QAAQ,QAAQ,MAAM,EAAE;AAAA,IACrC,CAAC,MAAgB,UAAkB,aAAa,OAAO,IAAI;AAAA,IAC3D,CAAC;AAAA,EACH;AAEA,QAAM,MAAM,QAAQ;AAEpB,MAAI,QAAQ,IAAI,UAAU,QAAQ;AAChC,QAAI;AAAA,MACF,SAAS;AAAA,QACP,OAAO;AAAA,QACP,aAAa;AAAA,UACX,KAAK,CAAC,SAAS,EAAE,QAAQ,IAAI,QAAQ,KAAK,IAAI,IAAI;AAAA,UAClD,KAAK,CAAC,EAAE,WAAW,OAAO,EAAE,WAAW;AAAA,QACzC;AAAA,QACA,QAAQ,KAAK,WAAW,EAAE,UAAU,KAAK,CAAC,CAAC;AAAA,MAC7C,CAAC;AAAA,IACH;AAAA,EACF;AAEA,MAAI,QAAQ,eAAe;AACzB,QAAI;AAAA,MACF,aAAa,cAAc;AAAA,QACzB,MAAM;AAAA,QACN,SAAS,QAAQ,IAAI;AAAA,QACrB,SAAS;AAAA,MACX,CAAC;AAAA,IACH;AAAA,EACF;AAEA,QAAMC,SAAQ,IAAI,YAAY,QAAQ;AAAA,IACpC,uBAAuB,QAAQ,yBAAyB;AAAA,IACxD,GAAG;AAAA,EACL,CAAC;AAED,EAAAA,OAAM,GAAG,SAAS,CAAC,YAAY,IAAI,KAAK,SAAS,OAAO,CAAC;AAEzD,MAAI,CAAC,QAAQ,QAAQ;AACnB,IAAAA,OAAM,GAAG,OAAO,CAAC,SAAS,IAAI,KAAK,OAAO,aAAa,IAAI,CAAC,CAAC;AAC7D,IAAAA,OAAM,GAAG,QAAQ,CAAC,YAAY,IAAI,KAAK,QAAQ,OAAO,CAAC;AAAA,EACzD;AAEA,WAAS,aAAa,KAAc,KAAe;AACjD,QAAI,4BAAsC,EAAE,KAAK,EAAE,SAAS,yBAAyB,CAAC;AAAA,EACxF;AAEA,MACG,KAAK,YAAY,CAAC,KAAc,UAAoBA,OAAM,SAAS,KAAK,KAAK,CAAC,EAC9E,IAAI,MAAM,CAAC,KAAc,UAAoBA,OAAM,SAAS,KAAK,KAAK,CAAC;AAE1E,MAAI,OAAO,MAAM,YAAY;AAC7B,MAAI,MAAM,MAAM,YAAY;AAC5B,MAAI,IAAI,MAAM,YAAY;AAC1B,MAAI,KAAK,MAAM,YAAY;AAE3B,SAAO;AACT;;;AFrIO,SAAS,YAAqB;AACnC,QAAM,UAAU,IAAI,QAAQ;AAE5B,SAAO,QACJ;AAAA,IACC,IAAI,OAAO,qBAAqB,gCAAgC,EAC7D,UAAU,MAAM,EAChB,QAAQ,GAAI,EACZ,IAAI,MAAM;AAAA,EACf,EACC;AAAA,IACC,IAAI,OAAO,uBAAuB,yBAAyB,EACxD,UAAU,YAAY,EACtB,QAAQ,CAAC,CAAC;AAAA,EACf,EACC;AAAA,IACC,IAAI,OAAO,mBAAmB,kCAAkC,EAC7D,UAAU,cAAc,EACxB,IAAI,iBAAiB;AAAA,EAC1B,EACC;AAAA,IACC,IAAI,OAAO,+BAA+B,sBAAsB,EAC7D,UAAU,MAAM,EAChB,QAAQ,GAAK,EACb,IAAI,qBAAqB;AAAA,EAC9B,EACC;AAAA,IACC,IAAI,OAAO,4BAA4B,kCAAkC,EACtE,UAAU,MAAM,EAChB,QAAQ,GAAG,EACX,IAAI,mBAAmB;AAAA,EAC5B,EACC;AAAA,IACC,IAAI,OAAO,gBAAgB,iDAAiD,EACzE,QAAQ,KAAK,EACb,IAAI,qBAAqB;AAAA,EAC9B,EACC;AAAA,IACC,IAAI,OAAO,4BAA4B,yBAAyB,EAC7D,QAAQ,EAAE,YAAY,KAAK,CAAC,EAC5B,QAAQ,WAAW,EACnB,IAAI,qBAAqB;AAAA,EAC9B,EACC;AAAA,IACC,IAAI,OAAO,4BAA4B,yBAAyB,EAC7D,UAAU,MAAM,EAChB,QAAQ,EAAE,YAAY,KAAK,CAAC,EAC5B,QAAQ,IAAI,EACZ,IAAI,qBAAqB;AAAA,EAC9B,EACC;AAAA,IACC,IAAI,OAAO,wBAAwB,uBAAuB,EACvD,UAAU,MAAM,EAChB,QAAQ,EAAE,YAAY,KAAK,CAAC,EAC5B,QAAQ,CAAC,EACT,IAAI,mBAAmB;AAAA,EAC5B,EACC,UAAU,IAAI,OAAO,YAAY,4BAA4B,CAAC,EAC9D;AAAA,IACC,IAAI;AAAA,MACF;AAAA,MACA;AAAA,IACF;AAAA,EACF,EACC,UAAU,IAAI,OAAO,uBAAuB,wCAAwC,CAAC,EACrF,QAAQ,gBAAY,WAAW,KAAK,iBAAiB,4BAA4B,EACjF,OAAO,OAAO,YAAY;AACzB,QAAI,CAAC,QAAQ,MAAM,UAAU,EAAE,QAAQ,UAAU,QAAQ,OAAO,SAAS;AACvE,cAAQ,KAAK,GAAG,QAAQ,gBAAgB,CAAC,EAAE;AAC3C,cAAQ,MAAM;AAAA;AAAA,CAA+D;AAC7E,cAAQ,KAAK,CAAC;AAAA,IAChB;AAEA,IAAAC,cAAa,sBAAsB,OAAO;AAE1C,UAAM,SAAS,CAAC,GAAG,QAAQ,OAAO,GAAI,QAAQ,UAAU,CAAC,CAAE,EAAE;AAAA,MAC3D,CAAC,MAAgB,UAAkB,aAAa,OAAO,IAAI;AAAA,MAC3D,CAAC;AAAA,IACH;AAEA,UAAM,aAAsB;AAAA,MAC1B,gBAAgB,QAAQ;AAAA,MACxB,QAAQ,QAAQ;AAAA,MAChB,uBAAuB,QAAQ;AAAA,MAC/B;AAAA,MACA,YAAY,QAAQ,aAChB;AAAA,QACE,MAAM,QAAQ;AAAA,QACd,MAAM,QAAQ;AAAA,QACd,IAAI,QAAQ;AAAA,MACd,IACA;AAAA,MACJ,cAAc,QAAQ;AAAA,MACtB,eAAe,QAAQ;AAAA,IACzB;AAEA,UAAM,MAAM,kBAAkB,UAAU;AAExC,QACG,GAAG,OAAO,CAAC,SAAS,QAAQ,OAAO,MAAM,KAAK,SAAS,CAAC,CAAC,EACzD,GAAG,QAAQ,QAAQ,IAAI,EACvB,GAAG,SAAS,QAAQ,KAAK;AAE5B,UAAM,SAAS,IAAI,OAAO,EAAE,MAAM,WAAW,MAAM,QAAQ,KAAK,GAAG,CAAC,UAAkB;AACpF,UAAI,OAAO;AACT,gBAAQ,MAAM,KAAK;AACnB,gBAAQ,KAAK,CAAC;AAAA,MAChB;AAEA,YAAM,OAAO,UAAU,GAAG,QAAQ,CAAC,IAAI,QAAQ,IAAI;AACnD,cAAQ;AAAA,QACN,2BAA2B,IAAI,aAAaC,OAAM,YAAY,OAAO,MAAM,CAAC;AAAA,MAC9E;AAEA,eAAS,aAAa,QAAyC;AAC7D,eAAO,OAAO,QAAQ,OAAO,QAAQ,CAAC,UAAU,MAAM,KAAK,CAAC,CAAC,EAC1D,KAAK,CAAC,GAAsB,MAA0B,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,IAAI,EAAG,EAC3E;AAAA,UACC,CAAC,CAAC,GAAG,CAAC,MACJ,GAAG,CAAC,KACF,aAAa,CAAC,IACV,KAAK,aAAa,CAA4B,CAAC,OAC/CA,OAAM,YAAY,CAAC,CACzB;AAAA,QACJ,EACC,KAAK,IAAI;AAAA,MACd;AAEA,cAAQ;AAAA,QACN,GAAGA,OAAM,KAAK,SAAS,CAAC;AAAA,QACxB,aAAa,KAAK,YAAY,CAAC,SAAS,QAAQ,CAAC,CAAC;AAAA,MACpD;AAAA,IACF,CAAC;AAED,YAAQ,GAAG,WAAW,YAAY;AAChC,cAAQ,KAAK,8CAA8C;AAE3D,aAAO,MAAM,CAAC,QAAgB;AAC5B,YAAI,KAAK;AACP,kBAAQ,MAAM,GAAG;AACjB,kBAAQ,KAAK,CAAC;AAAA,QAChB;AAEA,gBAAQ,QAAQ,eAAe;AAC/B,gBAAQ,KAAK,CAAC;AAAA,MAChB,CAAC;AAAA,IACH,CAAC;AAAA,EACH,CAAC;AACL;AAGA,IAAI,YAAY,QAAQ,cAAc,QAAQ,KAAK,CAAC,CAAC,EAAE,MAAM;AAC3D,YAAU,EAAE,MAAM,QAAQ,IAAI;AAChC;","names":["chalk","EventEmitter","dayjs","resolve","client","dayjs","proxy","EventEmitter","chalk"]}